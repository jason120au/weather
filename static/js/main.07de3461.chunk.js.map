{"version":3,"sources":["components/Weather.js","components/autocomplete.js","App.js","reportWebVitals.js","index.js"],"names":["refresh","window","location","reload","WeatherCard","weatherData","className","name","Button","inverted","color","circular","icon","onClick","moment","format","weather","main","Math","round","temp","humidity","wind","deg","speed","gust","Date","sys","sunrise","toLocaleTimeString","sunset","rain","dt","Autocomplete","getSuggestions","value","a","inputValue","trim","toLowerCase","fetch","response","json","data","getSuggestionValue","suggestion","text","renderSuggestion","onChange","event","newValue","setState","onSuggestionsFetchRequested","then","Error","suggestions","console","log","onSuggestionsClearRequested","state","this","inputProps","placeholder","class","React","Component","App","useState","lat","setLat","long","setLong","setData","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","process","res","result","fetchData","Weather","Dimmer","active","Loader","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07de3461.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.css';\nimport moment from 'moment';\nimport { Button } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nconst refresh = () => {\n  window.location.reload();\n}\n\nconst WeatherCard = ({weatherData}) => (\n\n  <div className=\"main\">\n    <h1>Weather</h1>\n\n      <div className=\"top\">\n        <p className=\"header\">{weatherData.name}</p>\n        <Button className=\"button\" inverted color='blue' circular icon='refresh' onClick={refresh} />\n      </div>\n      <div className=\"flex\">\n        <p className=\"day\">{moment().format('dddd')}, <span>{moment().format('Do MMMM YYYY')}</span></p>\n        <p className=\"description\">{weatherData.weather[0].main}</p>\n      </div>\n\n      <div className=\"flex\">\n        <p className=\"temp\">Temperature: {Math.round(weatherData.main.temp)}&deg;C</p>\n        <p className=\"temp\">Humidity: {weatherData.main.humidity}%</p>  \n        <p className=\"wind\">Wind: {weatherData.wind.deg}&deg; at {Math.round(weatherData.wind.speed)* 3.6}km/h Gust: {Math.round(weatherData.wind.gust)* 3.6}km/h</p>\n      </div>\n\n      <div className=\"flex\">\n        <p className=\"sunrise-sunset\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-AU')}</p>\n        <p className=\"sunrise-sunset\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-AU')}</p>\n        {weatherData.rain === 'undefined' && <p className=\"rain\">Rain: {weatherData.rain['1h']}mm</p> }\n        \n      </div>\n      <div className=\"flex\">\n        <p className=\"last-update\">Last updated: {new Date(weatherData.dt * 1000).toLocaleTimeString('en-AU')}</p>\n    </div>\n  </div>\n)\n\nexport default WeatherCard;\n\n\n\n\n","// server.autosuggest.js\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport './styles.css';\n\nclass Autocomplete extends React.Component {\n    constructor() {\n        super();\n\n        //Define state for value and suggestion collection\n        this.state = {\n            value: '',\n            suggestions: []\n        };\n    }\n\n    // Filter logic\n    getSuggestions = async (value) => {\n        const inputValue = value.trim().toLowerCase();\n        let response = await fetch(\"https://owncloud.jason120au.net/search/v3/search.php?override=true&q=\" + inputValue);\n        let data = await response.json()\n        return data;\n    };\n\n    // Trigger suggestions\n    getSuggestionValue = suggestion => suggestion.text;\n\n    // Render Each Option\n    renderSuggestion = suggestion => (\n        <span className=\"sugg-option\">\n            <span className=\"name\">\n                {suggestion.text}\n            </span>\n        </span>\n    );\n\n    // OnChange event handler\n    onChange = (event, { newValue }) => {\n        this.setState({\n            value: newValue\n        });\n    };\n\n    // Suggestion rerender when user types\n    onSuggestionsFetchRequested = ({ value }) => {\n        this.getSuggestions(value)\n            .then(data => {\n                if (data.Error) {\n                    this.setState({\n                        suggestions: []\n                    });\n                } else {\n                    this.setState({\n                        suggestions: data\n                    });\n                    console.log(data)\n                }\n            })\n    };\n\n    // Triggered on clear\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render() {\n        const { value, suggestions } = this.state;\n\n        // Option props\n        const inputProps = {\n            placeholder: 'Type an address',\n            value,\n            onChange: this.onChange\n        };\n\n        // Adding AutoSuggest component\n        return (\n            <div class=\"autocomplete\">\n\n            \n            <Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={this.getSuggestionValue}\n                renderSuggestion={this.renderSuggestion}\n                inputProps={inputProps}\n            /></div>\n        );\n    }\n}\n\nexport default Autocomplete;","import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Weather from './components/Weather';\nimport { Dimmer, Loader } from 'semantic-ui-react';\nimport Autocomplete from './components/autocomplete';\n\n\n\nexport default function App() {\n  \n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      });\n\n      await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n      .then(res => res.json())\n      .then(result => {\n        setData(result)\n        console.log(result);\n      });\n    }\n    fetchData();\n  }, [lat,long])\n  \n  return (\n<div className=\"App\">\n<div>\n  <Autocomplete class=\"autocomplete-box\"></Autocomplete>\n    \n </div>\n      {(typeof data.main != 'undefined') ? (\n        <Weather weatherData={data}/>\n      ): (\n        <div>\n          <Dimmer active>\n            <Loader>Please wait..</Loader>\n          </Dimmer>\n       </div>\n       \n     )}\n  \n </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}